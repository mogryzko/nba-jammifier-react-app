import React, { Component } from "react";
import axios from "axios";
import "./App.css";

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedFile: null,
      videoUploaded: false,
      selectedFileName: null
    };
  }

  saveFile = file => {
    const data = new FormData();
    data.append("file", file);
    return axios.post("http://localhost:8000/upload", data, {}).then(res => {
      return res;
    });
  };

  onChangeHandler = event => {
    this.setState({
      selectedFile: event.target.files[0],
      loaded: 0
    });
  };

  onClickHandler = () => {
    this.saveFile(this.state.selectedFile).then(res => {
      this.setState({ selectedFileName: res.data.filename });
      this.setState({ videoUploaded: true });
    });
  };

  getVideoImage = (path, secs, callback) => {
    var me = this;
    var video = document.createElement("video");
    video.onloadedmetadata = function() {
      if ("function" === typeof secs) {
        secs = secs(this.duration);
      }
      this.currentTime = Math.min(
        Math.max(0, (secs < 0 ? this.duration : 0) + secs),
        this.duration
      );
    };

    video.onseeked = function(e) {
      var canvas = document.createElement("canvas");
      canvas.height = video.videoHeight;
      canvas.width = video.videoWidth;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      var img = new Image();
      img.src = canvas.toDataURL();

      canvas.toBlob(function(blob) {
        const formData = new FormData();
        formData.append("data", blob, "filename.png");
        console.log("this si formData:", formData);
        me.saveFile(formData).then(res => {
          console.log("this is res", res);
        });
      });

      callback.call(me, img, this.currentTime, e);
    };
    video.onerror = function(e) {
      console.log("error", e);
      callback.call(me, undefined, undefined, e);
    };
    video.src = path;
  };

  showImageAt = secs => {
    var duration;
    this.getVideoImage(
      process.env.PUBLIC_URL + "/" + this.state.selectedFileName,
      function(totalTime) {
        duration = totalTime;
        return secs;
      },
      function(img, secs, event) {
        if (event.type === "seeked") {
          var li = document.createElement("li");
          li.innerHTML += "<b>Frame at second " + secs + ":</b><br />";
          li.appendChild(img);
          document.getElementById("olFrames").appendChild(li);
          secs = secs + 0.25;
          if (duration >= secs) {
            this.showImageAt(secs);
          }
        }
      }
    );
  };

  showUploadOrVideo = () => {
    // Show images
    if (this.state.videoUploaded) {
      return (
        <div>
          <p>These are the frames' images generated by getVideoImage():</p>
          <ol id="olFrames"></ol>
          {this.showImageAt(0)}
        </div>
      );
    } else {
      return (
        <div className="container">
          <div className="col-md-6">
            <form method="post" action="#" id="#">
              <div className="form-group files">
                <label>Upload Your File </label>
                <input
                  type="file"
                  name="file"
                  className="form-control"
                  onChange={this.onChangeHandler}
                />
              </div>
            </form>
            <button
              type="button"
              className="btn btn-success btn-block"
              onClick={this.onClickHandler}
            >
              Upload
            </button>
          </div>
        </div>
      );
    }
    // Show upload element
  };

  render() {
    return (
      <React.Fragment>
        <link
          href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
          rel="stylesheet"
          id="bootstrap-css"
        />
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
        <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
        <div className="App">
          <header className="App-header">{this.showUploadOrVideo()}</header>
        </div>
      </React.Fragment>
    );
  }
}
export default App;
